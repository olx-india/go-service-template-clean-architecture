// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"go-service-template/server/resolver"

	mock "github.com/stretchr/testify/mock"
)

// NewResolver creates a new instance of Resolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Resolver {
	mock := &Resolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Resolver is an autogenerated mock type for the Resolver type
type Resolver struct {
	mock.Mock
}

type Resolver_Expecter struct {
	mock *mock.Mock
}

func (_m *Resolver) EXPECT() *Resolver_Expecter {
	return &Resolver_Expecter{mock: &_m.Mock}
}

// ResolveServerContext provides a mock function for the type Resolver
func (_mock *Resolver) ResolveServerContext() *resolver.ServerContext {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResolveServerContext")
	}

	var r0 *resolver.ServerContext
	if returnFunc, ok := ret.Get(0).(func() *resolver.ServerContext); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resolver.ServerContext)
		}
	}
	return r0
}

// Resolver_ResolveServerContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveServerContext'
type Resolver_ResolveServerContext_Call struct {
	*mock.Call
}

// ResolveServerContext is a helper method to define mock.On call
func (_e *Resolver_Expecter) ResolveServerContext() *Resolver_ResolveServerContext_Call {
	return &Resolver_ResolveServerContext_Call{Call: _e.mock.On("ResolveServerContext")}
}

func (_c *Resolver_ResolveServerContext_Call) Run(run func()) *Resolver_ResolveServerContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Resolver_ResolveServerContext_Call) Return(serverContext *resolver.ServerContext) *Resolver_ResolveServerContext_Call {
	_c.Call.Return(serverContext)
	return _c
}

func (_c *Resolver_ResolveServerContext_Call) RunAndReturn(run func() *resolver.ServerContext) *Resolver_ResolveServerContext_Call {
	_c.Call.Return(run)
	return _c
}
