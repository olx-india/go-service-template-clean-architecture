// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"go-service-template/server/resolver"
	"go-service-template/server/router"

	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewIRouter creates a new instance of IRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRouter {
	mock := &IRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IRouter is an autogenerated mock type for the IRouter type
type IRouter struct {
	mock.Mock
}

type IRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *IRouter) EXPECT() *IRouter_Expecter {
	return &IRouter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type IRouter
func (_mock *IRouter) Get() *gin.Engine {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *gin.Engine
	if returnFunc, ok := ret.Get(0).(func() *gin.Engine); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Engine)
		}
	}
	return r0
}

// IRouter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IRouter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *IRouter_Expecter) Get() *IRouter_Get_Call {
	return &IRouter_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *IRouter_Get_Call) Run(run func()) *IRouter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRouter_Get_Call) Return(engine *gin.Engine) *IRouter_Get_Call {
	_c.Call.Return(engine)
	return _c
}

func (_c *IRouter_Get_Call) RunAndReturn(run func() *gin.Engine) *IRouter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRoutes provides a mock function for the type IRouter
func (_mock *IRouter) RegisterRoutes(serverContext *resolver.ServerContext) *router.Router {
	ret := _mock.Called(serverContext)

	if len(ret) == 0 {
		panic("no return value specified for RegisterRoutes")
	}

	var r0 *router.Router
	if returnFunc, ok := ret.Get(0).(func(*resolver.ServerContext) *router.Router); ok {
		r0 = returnFunc(serverContext)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*router.Router)
		}
	}
	return r0
}

// IRouter_RegisterRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRoutes'
type IRouter_RegisterRoutes_Call struct {
	*mock.Call
}

// RegisterRoutes is a helper method to define mock.On call
//   - serverContext *resolver.ServerContext
func (_e *IRouter_Expecter) RegisterRoutes(serverContext interface{}) *IRouter_RegisterRoutes_Call {
	return &IRouter_RegisterRoutes_Call{Call: _e.mock.On("RegisterRoutes", serverContext)}
}

func (_c *IRouter_RegisterRoutes_Call) Run(run func(serverContext *resolver.ServerContext)) *IRouter_RegisterRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *resolver.ServerContext
		if args[0] != nil {
			arg0 = args[0].(*resolver.ServerContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IRouter_RegisterRoutes_Call) Return(router1 *router.Router) *IRouter_RegisterRoutes_Call {
	_c.Call.Return(router1)
	return _c
}

func (_c *IRouter_RegisterRoutes_Call) RunAndReturn(run func(serverContext *resolver.ServerContext) *router.Router) *IRouter_RegisterRoutes_Call {
	_c.Call.Return(run)
	return _c
}
