// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"go-service-template/internal/api/dto"

	mock "github.com/stretchr/testify/mock"
)

// NewILimitUseCase creates a new instance of ILimitUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILimitUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILimitUseCase {
	mock := &ILimitUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ILimitUseCase is an autogenerated mock type for the ILimitUseCase type
type ILimitUseCase struct {
	mock.Mock
}

type ILimitUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *ILimitUseCase) EXPECT() *ILimitUseCase_Expecter {
	return &ILimitUseCase_Expecter{mock: &_m.Mock}
}

// CheckLimit provides a mock function for the type ILimitUseCase
func (_mock *ILimitUseCase) CheckLimit(checkLimitRequest *dto.CheckLimitRequest) (dto.CheckLimitResponse, error) {
	ret := _mock.Called(checkLimitRequest)

	if len(ret) == 0 {
		panic("no return value specified for CheckLimit")
	}

	var r0 dto.CheckLimitResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*dto.CheckLimitRequest) (dto.CheckLimitResponse, error)); ok {
		return returnFunc(checkLimitRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(*dto.CheckLimitRequest) dto.CheckLimitResponse); ok {
		r0 = returnFunc(checkLimitRequest)
	} else {
		r0 = ret.Get(0).(dto.CheckLimitResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(*dto.CheckLimitRequest) error); ok {
		r1 = returnFunc(checkLimitRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ILimitUseCase_CheckLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLimit'
type ILimitUseCase_CheckLimit_Call struct {
	*mock.Call
}

// CheckLimit is a helper method to define mock.On call
//   - checkLimitRequest *dto.CheckLimitRequest
func (_e *ILimitUseCase_Expecter) CheckLimit(checkLimitRequest interface{}) *ILimitUseCase_CheckLimit_Call {
	return &ILimitUseCase_CheckLimit_Call{Call: _e.mock.On("CheckLimit", checkLimitRequest)}
}

func (_c *ILimitUseCase_CheckLimit_Call) Run(run func(checkLimitRequest *dto.CheckLimitRequest)) *ILimitUseCase_CheckLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *dto.CheckLimitRequest
		if args[0] != nil {
			arg0 = args[0].(*dto.CheckLimitRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ILimitUseCase_CheckLimit_Call) Return(checkLimitResponse dto.CheckLimitResponse, err error) *ILimitUseCase_CheckLimit_Call {
	_c.Call.Return(checkLimitResponse, err)
	return _c
}

func (_c *ILimitUseCase_CheckLimit_Call) RunAndReturn(run func(checkLimitRequest *dto.CheckLimitRequest) (dto.CheckLimitResponse, error)) *ILimitUseCase_CheckLimit_Call {
	_c.Call.Return(run)
	return _c
}

// ResetLimit provides a mock function for the type ILimitUseCase
func (_mock *ILimitUseCase) ResetLimit(checkLimitRequest *dto.CheckLimitRequest) (dto.CheckLimitResponse, error) {
	ret := _mock.Called(checkLimitRequest)

	if len(ret) == 0 {
		panic("no return value specified for ResetLimit")
	}

	var r0 dto.CheckLimitResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*dto.CheckLimitRequest) (dto.CheckLimitResponse, error)); ok {
		return returnFunc(checkLimitRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(*dto.CheckLimitRequest) dto.CheckLimitResponse); ok {
		r0 = returnFunc(checkLimitRequest)
	} else {
		r0 = ret.Get(0).(dto.CheckLimitResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(*dto.CheckLimitRequest) error); ok {
		r1 = returnFunc(checkLimitRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ILimitUseCase_ResetLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetLimit'
type ILimitUseCase_ResetLimit_Call struct {
	*mock.Call
}

// ResetLimit is a helper method to define mock.On call
//   - checkLimitRequest *dto.CheckLimitRequest
func (_e *ILimitUseCase_Expecter) ResetLimit(checkLimitRequest interface{}) *ILimitUseCase_ResetLimit_Call {
	return &ILimitUseCase_ResetLimit_Call{Call: _e.mock.On("ResetLimit", checkLimitRequest)}
}

func (_c *ILimitUseCase_ResetLimit_Call) Run(run func(checkLimitRequest *dto.CheckLimitRequest)) *ILimitUseCase_ResetLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *dto.CheckLimitRequest
		if args[0] != nil {
			arg0 = args[0].(*dto.CheckLimitRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ILimitUseCase_ResetLimit_Call) Return(checkLimitResponse dto.CheckLimitResponse, err error) *ILimitUseCase_ResetLimit_Call {
	_c.Call.Return(checkLimitResponse, err)
	return _c
}

func (_c *ILimitUseCase_ResetLimit_Call) RunAndReturn(run func(checkLimitRequest *dto.CheckLimitRequest) (dto.CheckLimitResponse, error)) *ILimitUseCase_ResetLimit_Call {
	_c.Call.Return(run)
	return _c
}
