// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"go-service-template/internal/api/dto"
	"go-service-template/internal/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// NewIUserUseCase creates a new instance of IUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUseCase {
	mock := &IUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IUserUseCase is an autogenerated mock type for the IUserUseCase type
type IUserUseCase struct {
	mock.Mock
}

type IUserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserUseCase) EXPECT() *IUserUseCase_Expecter {
	return &IUserUseCase_Expecter{mock: &_m.Mock}
}

// CreateUserRequest provides a mock function for the type IUserUseCase
func (_mock *IUserUseCase) CreateUserRequest(req *dto.CreateUserRequest) (*user.User, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserRequest")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*dto.CreateUserRequest) (*user.User, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*dto.CreateUserRequest) *user.User); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*dto.CreateUserRequest) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IUserUseCase_CreateUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRequest'
type IUserUseCase_CreateUserRequest_Call struct {
	*mock.Call
}

// CreateUserRequest is a helper method to define mock.On call
//   - req *dto.CreateUserRequest
func (_e *IUserUseCase_Expecter) CreateUserRequest(req interface{}) *IUserUseCase_CreateUserRequest_Call {
	return &IUserUseCase_CreateUserRequest_Call{Call: _e.mock.On("CreateUserRequest", req)}
}

func (_c *IUserUseCase_CreateUserRequest_Call) Run(run func(req *dto.CreateUserRequest)) *IUserUseCase_CreateUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *dto.CreateUserRequest
		if args[0] != nil {
			arg0 = args[0].(*dto.CreateUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IUserUseCase_CreateUserRequest_Call) Return(user1 *user.User, err error) *IUserUseCase_CreateUserRequest_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *IUserUseCase_CreateUserRequest_Call) RunAndReturn(run func(req *dto.CreateUserRequest) (*user.User, error)) *IUserUseCase_CreateUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUser provides a mock function for the type IUserUseCase
func (_mock *IUserUseCase) FetchUser(req *dto.FetchUserRequest) (*user.User, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for FetchUser")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*dto.FetchUserRequest) (*user.User, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(*dto.FetchUserRequest) *user.User); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*dto.FetchUserRequest) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IUserUseCase_FetchUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUser'
type IUserUseCase_FetchUser_Call struct {
	*mock.Call
}

// FetchUser is a helper method to define mock.On call
//   - req *dto.FetchUserRequest
func (_e *IUserUseCase_Expecter) FetchUser(req interface{}) *IUserUseCase_FetchUser_Call {
	return &IUserUseCase_FetchUser_Call{Call: _e.mock.On("FetchUser", req)}
}

func (_c *IUserUseCase_FetchUser_Call) Run(run func(req *dto.FetchUserRequest)) *IUserUseCase_FetchUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *dto.FetchUserRequest
		if args[0] != nil {
			arg0 = args[0].(*dto.FetchUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IUserUseCase_FetchUser_Call) Return(user1 *user.User, err error) *IUserUseCase_FetchUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *IUserUseCase_FetchUser_Call) RunAndReturn(run func(req *dto.FetchUserRequest) (*user.User, error)) *IUserUseCase_FetchUser_Call {
	_c.Call.Return(run)
	return _c
}
