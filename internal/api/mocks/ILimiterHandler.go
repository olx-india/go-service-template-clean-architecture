// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"go-service-template/internal/infrastructure/context"

	mock "github.com/stretchr/testify/mock"
)

// NewILimiterHandler creates a new instance of ILimiterHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILimiterHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILimiterHandler {
	mock := &ILimiterHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ILimiterHandler is an autogenerated mock type for the ILimiterHandler type
type ILimiterHandler struct {
	mock.Mock
}

type ILimiterHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ILimiterHandler) EXPECT() *ILimiterHandler_Expecter {
	return &ILimiterHandler_Expecter{mock: &_m.Mock}
}

// CheckLimit provides a mock function for the type ILimiterHandler
func (_mock *ILimiterHandler) CheckLimit(ctx *context.GinContext) {
	_mock.Called(ctx)
	return
}

// ILimiterHandler_CheckLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLimit'
type ILimiterHandler_CheckLimit_Call struct {
	*mock.Call
}

// CheckLimit is a helper method to define mock.On call
//   - ctx *context.GinContext
func (_e *ILimiterHandler_Expecter) CheckLimit(ctx interface{}) *ILimiterHandler_CheckLimit_Call {
	return &ILimiterHandler_CheckLimit_Call{Call: _e.mock.On("CheckLimit", ctx)}
}

func (_c *ILimiterHandler_CheckLimit_Call) Run(run func(ctx *context.GinContext)) *ILimiterHandler_CheckLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *context.GinContext
		if args[0] != nil {
			arg0 = args[0].(*context.GinContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ILimiterHandler_CheckLimit_Call) Return() *ILimiterHandler_CheckLimit_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILimiterHandler_CheckLimit_Call) RunAndReturn(run func(ctx *context.GinContext)) *ILimiterHandler_CheckLimit_Call {
	_c.Run(run)
	return _c
}

// ResetLimit provides a mock function for the type ILimiterHandler
func (_mock *ILimiterHandler) ResetLimit(ctx *context.GinContext) {
	_mock.Called(ctx)
	return
}

// ILimiterHandler_ResetLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetLimit'
type ILimiterHandler_ResetLimit_Call struct {
	*mock.Call
}

// ResetLimit is a helper method to define mock.On call
//   - ctx *context.GinContext
func (_e *ILimiterHandler_Expecter) ResetLimit(ctx interface{}) *ILimiterHandler_ResetLimit_Call {
	return &ILimiterHandler_ResetLimit_Call{Call: _e.mock.On("ResetLimit", ctx)}
}

func (_c *ILimiterHandler_ResetLimit_Call) Run(run func(ctx *context.GinContext)) *ILimiterHandler_ResetLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *context.GinContext
		if args[0] != nil {
			arg0 = args[0].(*context.GinContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ILimiterHandler_ResetLimit_Call) Return() *ILimiterHandler_ResetLimit_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILimiterHandler_ResetLimit_Call) RunAndReturn(run func(ctx *context.GinContext)) *ILimiterHandler_ResetLimit_Call {
	_c.Run(run)
	return _c
}
