// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"go-service-template/internal/infrastructure/logger"

	mock "github.com/stretchr/testify/mock"
)

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type Logger
func (_mock *Logger) Debug(ctx context.Context, message string, fields ...logger.Field) {
	if len(fields) > 0 {
		_mock.Called(ctx, message, fields)
	} else {
		_mock.Called(ctx, message)
	}

	return
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - fields ...logger.Field
func (_e *Logger_Expecter) Debug(ctx interface{}, message interface{}, fields ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{ctx, message}, fields...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []logger.Field
		var variadicArgs []logger.Field
		if len(args) > 2 {
			variadicArgs = args[2].([]logger.Field)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function for the type Logger
func (_mock *Logger) Debugf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// Logger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type Logger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Debugf(ctx interface{}, format interface{}, args ...interface{}) *Logger_Debugf_Call {
	return &Logger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *Logger_Debugf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *Logger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Debugf_Call) Return() *Logger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debugf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *Logger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type Logger
func (_mock *Logger) Error(ctx context.Context, message string, fields ...logger.Field) {
	if len(fields) > 0 {
		_mock.Called(ctx, message, fields)
	} else {
		_mock.Called(ctx, message)
	}

	return
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - fields ...logger.Field
func (_e *Logger_Expecter) Error(ctx interface{}, message interface{}, fields ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{ctx, message}, fields...)...)}
}

func (_c *Logger_Error_Call) Run(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []logger.Field
		var variadicArgs []logger.Field
		if len(args) > 2 {
			variadicArgs = args[2].([]logger.Field)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Error_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function for the type Logger
func (_mock *Logger) Errorf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// Logger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Logger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Errorf(ctx interface{}, format interface{}, args ...interface{}) *Logger_Errorf_Call {
	return &Logger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *Logger_Errorf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *Logger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Errorf_Call) Return() *Logger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Errorf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *Logger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function for the type Logger
func (_mock *Logger) Fatal(ctx context.Context, message string, fields ...logger.Field) {
	if len(fields) > 0 {
		_mock.Called(ctx, message, fields)
	} else {
		_mock.Called(ctx, message)
	}

	return
}

// Logger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type Logger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - fields ...logger.Field
func (_e *Logger_Expecter) Fatal(ctx interface{}, message interface{}, fields ...interface{}) *Logger_Fatal_Call {
	return &Logger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{ctx, message}, fields...)...)}
}

func (_c *Logger_Fatal_Call) Run(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []logger.Field
		var variadicArgs []logger.Field
		if len(args) > 2 {
			variadicArgs = args[2].([]logger.Field)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Fatal_Call) Return() *Logger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatal_Call) RunAndReturn(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function for the type Logger
func (_mock *Logger) Fatalf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// Logger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type Logger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Fatalf(ctx interface{}, format interface{}, args ...interface{}) *Logger_Fatalf_Call {
	return &Logger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *Logger_Fatalf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *Logger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Fatalf_Call) Return() *Logger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatalf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *Logger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type Logger
func (_mock *Logger) Info(ctx context.Context, message string, fields ...logger.Field) {
	if len(fields) > 0 {
		_mock.Called(ctx, message, fields)
	} else {
		_mock.Called(ctx, message)
	}

	return
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - fields ...logger.Field
func (_e *Logger_Expecter) Info(ctx interface{}, message interface{}, fields ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx, message}, fields...)...)}
}

func (_c *Logger_Info_Call) Run(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []logger.Field
		var variadicArgs []logger.Field
		if len(args) > 2 {
			variadicArgs = args[2].([]logger.Field)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Info_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function for the type Logger
func (_mock *Logger) Infof(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// Logger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Logger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Infof(ctx interface{}, format interface{}, args ...interface{}) *Logger_Infof_Call {
	return &Logger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *Logger_Infof_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *Logger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Infof_Call) Return() *Logger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Infof_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *Logger_Infof_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type Logger
func (_mock *Logger) Warn(ctx context.Context, message string, fields ...logger.Field) {
	if len(fields) > 0 {
		_mock.Called(ctx, message, fields)
	} else {
		_mock.Called(ctx, message)
	}

	return
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - ctx context.Context
//   - message string
//   - fields ...logger.Field
func (_e *Logger_Expecter) Warn(ctx interface{}, message interface{}, fields ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{ctx, message}, fields...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []logger.Field
		var variadicArgs []logger.Field
		if len(args) > 2 {
			variadicArgs = args[2].([]logger.Field)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(ctx context.Context, message string, fields ...logger.Field)) *Logger_Warn_Call {
	_c.Run(run)
	return _c
}

// Warnf provides a mock function for the type Logger
func (_mock *Logger) Warnf(ctx context.Context, format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(ctx, format, args)
	} else {
		_mock.Called(ctx, format)
	}

	return
}

// Logger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type Logger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - ctx context.Context
//   - format string
//   - args ...interface{}
func (_e *Logger_Expecter) Warnf(ctx interface{}, format interface{}, args ...interface{}) *Logger_Warnf_Call {
	return &Logger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{ctx, format}, args...)...)}
}

func (_c *Logger_Warnf_Call) Run(run func(ctx context.Context, format string, args ...interface{})) *Logger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Logger_Warnf_Call) Return() *Logger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warnf_Call) RunAndReturn(run func(ctx context.Context, format string, args ...interface{})) *Logger_Warnf_Call {
	_c.Run(run)
	return _c
}
