// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// GetAppName provides a mock function for the type Provider
func (_mock *Provider) GetAppName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_GetAppName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppName'
type Provider_GetAppName_Call struct {
	*mock.Call
}

// GetAppName is a helper method to define mock.On call
func (_e *Provider_Expecter) GetAppName() *Provider_GetAppName_Call {
	return &Provider_GetAppName_Call{Call: _e.mock.On("GetAppName")}
}

func (_c *Provider_GetAppName_Call) Run(run func()) *Provider_GetAppName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetAppName_Call) Return(s string) *Provider_GetAppName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_GetAppName_Call) RunAndReturn(run func() string) *Provider_GetAppName_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnv provides a mock function for the type Provider
func (_mock *Provider) GetEnv() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnv")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_GetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnv'
type Provider_GetEnv_Call struct {
	*mock.Call
}

// GetEnv is a helper method to define mock.On call
func (_e *Provider_Expecter) GetEnv() *Provider_GetEnv_Call {
	return &Provider_GetEnv_Call{Call: _e.mock.On("GetEnv")}
}

func (_c *Provider_GetEnv_Call) Run(run func()) *Provider_GetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetEnv_Call) Return(s string) *Provider_GetEnv_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_GetEnv_Call) RunAndReturn(run func() string) *Provider_GetEnv_Call {
	_c.Call.Return(run)
	return _c
}

// GetOTLPEndpoint provides a mock function for the type Provider
func (_mock *Provider) GetOTLPEndpoint() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOTLPEndpoint")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_GetOTLPEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOTLPEndpoint'
type Provider_GetOTLPEndpoint_Call struct {
	*mock.Call
}

// GetOTLPEndpoint is a helper method to define mock.On call
func (_e *Provider_Expecter) GetOTLPEndpoint() *Provider_GetOTLPEndpoint_Call {
	return &Provider_GetOTLPEndpoint_Call{Call: _e.mock.On("GetOTLPEndpoint")}
}

func (_c *Provider_GetOTLPEndpoint_Call) Run(run func()) *Provider_GetOTLPEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetOTLPEndpoint_Call) Return(s string) *Provider_GetOTLPEndpoint_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_GetOTLPEndpoint_Call) RunAndReturn(run func() string) *Provider_GetOTLPEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetRedisHost provides a mock function for the type Provider
func (_mock *Provider) GetRedisHost() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRedisHost")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_GetRedisHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRedisHost'
type Provider_GetRedisHost_Call struct {
	*mock.Call
}

// GetRedisHost is a helper method to define mock.On call
func (_e *Provider_Expecter) GetRedisHost() *Provider_GetRedisHost_Call {
	return &Provider_GetRedisHost_Call{Call: _e.mock.On("GetRedisHost")}
}

func (_c *Provider_GetRedisHost_Call) Run(run func()) *Provider_GetRedisHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetRedisHost_Call) Return(s string) *Provider_GetRedisHost_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_GetRedisHost_Call) RunAndReturn(run func() string) *Provider_GetRedisHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerHost provides a mock function for the type Provider
func (_mock *Provider) GetServerHost() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerHost")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_GetServerHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerHost'
type Provider_GetServerHost_Call struct {
	*mock.Call
}

// GetServerHost is a helper method to define mock.On call
func (_e *Provider_Expecter) GetServerHost() *Provider_GetServerHost_Call {
	return &Provider_GetServerHost_Call{Call: _e.mock.On("GetServerHost")}
}

func (_c *Provider_GetServerHost_Call) Run(run func()) *Provider_GetServerHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetServerHost_Call) Return(s string) *Provider_GetServerHost_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_GetServerHost_Call) RunAndReturn(run func() string) *Provider_GetServerHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerPort provides a mock function for the type Provider
func (_mock *Provider) GetServerPort() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerPort")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Provider_GetServerPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerPort'
type Provider_GetServerPort_Call struct {
	*mock.Call
}

// GetServerPort is a helper method to define mock.On call
func (_e *Provider_Expecter) GetServerPort() *Provider_GetServerPort_Call {
	return &Provider_GetServerPort_Call{Call: _e.mock.On("GetServerPort")}
}

func (_c *Provider_GetServerPort_Call) Run(run func()) *Provider_GetServerPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetServerPort_Call) Return(s string) *Provider_GetServerPort_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Provider_GetServerPort_Call) RunAndReturn(run func() string) *Provider_GetServerPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerReadTimeout provides a mock function for the type Provider
func (_mock *Provider) GetServerReadTimeout() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerReadTimeout")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// Provider_GetServerReadTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerReadTimeout'
type Provider_GetServerReadTimeout_Call struct {
	*mock.Call
}

// GetServerReadTimeout is a helper method to define mock.On call
func (_e *Provider_Expecter) GetServerReadTimeout() *Provider_GetServerReadTimeout_Call {
	return &Provider_GetServerReadTimeout_Call{Call: _e.mock.On("GetServerReadTimeout")}
}

func (_c *Provider_GetServerReadTimeout_Call) Run(run func()) *Provider_GetServerReadTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetServerReadTimeout_Call) Return(duration time.Duration) *Provider_GetServerReadTimeout_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *Provider_GetServerReadTimeout_Call) RunAndReturn(run func() time.Duration) *Provider_GetServerReadTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerWriteTimeout provides a mock function for the type Provider
func (_mock *Provider) GetServerWriteTimeout() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerWriteTimeout")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// Provider_GetServerWriteTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerWriteTimeout'
type Provider_GetServerWriteTimeout_Call struct {
	*mock.Call
}

// GetServerWriteTimeout is a helper method to define mock.On call
func (_e *Provider_Expecter) GetServerWriteTimeout() *Provider_GetServerWriteTimeout_Call {
	return &Provider_GetServerWriteTimeout_Call{Call: _e.mock.On("GetServerWriteTimeout")}
}

func (_c *Provider_GetServerWriteTimeout_Call) Run(run func()) *Provider_GetServerWriteTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetServerWriteTimeout_Call) Return(duration time.Duration) *Provider_GetServerWriteTimeout_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *Provider_GetServerWriteTimeout_Call) RunAndReturn(run func() time.Duration) *Provider_GetServerWriteTimeout_Call {
	_c.Call.Return(run)
	return _c
}
