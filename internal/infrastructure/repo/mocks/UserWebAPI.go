// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"go-service-template/internal/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// NewUserWebAPI creates a new instance of UserWebAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserWebAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserWebAPI {
	mock := &UserWebAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserWebAPI is an autogenerated mock type for the UserWebAPI type
type UserWebAPI struct {
	mock.Mock
}

type UserWebAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *UserWebAPI) EXPECT() *UserWebAPI_Expecter {
	return &UserWebAPI_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function for the type UserWebAPI
func (_mock *UserWebAPI) Fetch(n int) (user.User, error) {
	ret := _mock.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (user.User, error)); ok {
		return returnFunc(n)
	}
	if returnFunc, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = returnFunc(n)
	} else {
		r0 = ret.Get(0).(user.User)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserWebAPI_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type UserWebAPI_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - n int
func (_e *UserWebAPI_Expecter) Fetch(n interface{}) *UserWebAPI_Fetch_Call {
	return &UserWebAPI_Fetch_Call{Call: _e.mock.On("Fetch", n)}
}

func (_c *UserWebAPI_Fetch_Call) Run(run func(n int)) *UserWebAPI_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserWebAPI_Fetch_Call) Return(user1 user.User, err error) *UserWebAPI_Fetch_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserWebAPI_Fetch_Call) RunAndReturn(run func(n int) (user.User, error)) *UserWebAPI_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type UserWebAPI
func (_mock *UserWebAPI) Save(user1 user.User) (user.User, error) {
	ret := _mock.Called(user1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(user.User) (user.User, error)); ok {
		return returnFunc(user1)
	}
	if returnFunc, ok := ret.Get(0).(func(user.User) user.User); ok {
		r0 = returnFunc(user1)
	} else {
		r0 = ret.Get(0).(user.User)
	}
	if returnFunc, ok := ret.Get(1).(func(user.User) error); ok {
		r1 = returnFunc(user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserWebAPI_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type UserWebAPI_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user1 user.User
func (_e *UserWebAPI_Expecter) Save(user1 interface{}) *UserWebAPI_Save_Call {
	return &UserWebAPI_Save_Call{Call: _e.mock.On("Save", user1)}
}

func (_c *UserWebAPI_Save_Call) Run(run func(user1 user.User)) *UserWebAPI_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 user.User
		if args[0] != nil {
			arg0 = args[0].(user.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UserWebAPI_Save_Call) Return(user11 user.User, err error) *UserWebAPI_Save_Call {
	_c.Call.Return(user11, err)
	return _c
}

func (_c *UserWebAPI_Save_Call) RunAndReturn(run func(user1 user.User) (user.User, error)) *UserWebAPI_Save_Call {
	_c.Call.Return(run)
	return _c
}
